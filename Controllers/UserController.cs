using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using Uprise.Dto;
using Uprise.Repository.Uprise;
using Uprise.Repository.Uprise.Models;
using Uprise.Requests;

namespace Uprise.Controllers;

[Route("api/[controller]")]
[ApiController]
public class UserController : ControllerBase
{
    private readonly IConfiguration _configuration;
    private readonly UpriseDbContext _db;
    private readonly ILogger<UserController> _logger;

    public UserController(IConfiguration configuration, UpriseDbContext db, ILogger<UserController> logger)
    {
        _configuration = configuration;
        _db = db;
        _logger = logger;
    }

    private string GenerateJwtToken(User user)
    {
        var claims = new[]
        {
                new Claim(ClaimTypes.Name, user.Name),
                // Add other claims as needed
            };

        string jwtSettings_key = _configuration.GetValue<string>("JwtSettings:Key");
        string jwtSettings_issuer = _configuration.GetValue<string>("JwtSettings:Issuer");
        string jwtSettings_audience = _configuration.GetValue<string>("JwtSettings:Audience");

        if (jwtSettings_key == null) throw new KeyNotFoundException("Value under \"JwtSettings:Key\" not found.");
        if (jwtSettings_issuer == null) throw new KeyNotFoundException("Value under \"JwtSettings:Issuer\" not found.");
        if (jwtSettings_audience == null) throw new KeyNotFoundException("Value under \"JwtSettings:Audience\" not found.");

        var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtSettings_key));
        var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

        var token = new JwtSecurityToken(
            issuer: jwtSettings_issuer,
            audience: jwtSettings_audience,
            claims: claims,
            expires: DateTime.Now.AddMinutes(Convert.ToDouble(500)),
            signingCredentials: creds
        );

        return new JwtSecurityTokenHandler().WriteToken(token);
    }

    [HttpPost("register")]
    public async Task<ActionResult> RegisterUserAsync([FromBody] User request)
    {
        try
        {            
            var entity = await _db.Users.FromSqlRaw( // id generated by database
                $"INSERT INTO {Uprise.Repository.Uprise.Models.User.Table()} (name, email, password) " +
                "VALUES ({0}, {1}, {2}) RETURNING *",
                    new object[] 
                    {
                        request.Name,
                        request.Email,
                        request.PasswordHash
                    }
                ).ToListAsync();
            return Ok(new JwtDto() { Token = GenerateJwtToken(entity.First()) });
        }
        catch (Exception e)
        {
            return BadRequest(e.Message);
        }
    }

    [HttpPost("login")]
    public async Task<ActionResult> Login([FromBody] LoginRequest request)
    {
        try
        {
            var user = await _db.Users.SingleOrDefaultAsync(u => u.Email == request.Email && u.PasswordHash == request.Password);

            if (user == null) return Unauthorized("Invalid credentials");
            var token = GenerateJwtToken(user);
            return Ok(new { Token = token });
        }
        catch (Exception e)
        {
            return BadRequest(e.Message);
        }
    }
}
